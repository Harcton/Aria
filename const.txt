// Here are some of my (definitely bad) advice learned from using Visual Studio for Linux development extension. //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Advice hall of fame:
	1. Rebuild
	2. Turn on verbose build output: Tools>Options>Build&Run>...output verbosity
	3. Check the output window, the error list won't help you 9 times out of 8.
	4. On raspberry, the class members need to be initialized in order.
	5. On raspberry, 'friend class MyClass' needs a prior forward declaration.
	6. Try searching output for "ld returned 1 exit status"
	7. Do not trust std::cout to work perfectly when remote debugging. Especially when you are flooding the thing with output...
	
ld returned 1 exit status -> Check Linker/library dependencies.
	/usr/bin/ld: cannot find -l... check the following:
		Generated .a file is named with the lib- prefix
		NO l- or lib- prefix in the linker input!
	
Unable to start debugging, remote connection closed -> clean & rebuild

WinSock.h has already been included?
	Check that no Windows.h is included before boost
	
time/assert related errors?
	Don't use source code files with generic names like Time.h/Assert.h

Avoid std::shared_ptr... gives otherworldly errors, not related to std::shared_ptr at all (I got like 16k lines of output from using one)

Raspberry g++: (Raspbian 4.9.2-10) 4.9.2

The stack around variable 'foo' was corrupted -> Check if there are any variables declared inside #ifdef #endif guards. For some reason these can cause stack corruption.

Segmentation fault on linux can be caused by functions defining a return type, but not returning from a specific path...

If starting debugging fails due to a file not found at "E:/something/local_solution_folder/bin/program.out" -> Property Pages > Linker > Copy output

Error	C1047	The object or library file 'E:\Ohjelmointi\Projects\SpehsEngine\/bin/Win32/Release/v140/\SpehsEngine.lib' was created with an older compiler than other objects; rebuild old objects and libraries

//!!! undefined reference to `boost::system : error : generic_category()'
	1# boost_system isn't linked.
	2# Adding this to main.cpp #include <boost/system/error_code.hpp> -> Works (but why?)
	
2>E:\Ohjelmointi\Projects\Aria\Solution\Shells\Sandshell\Main.cpp(1,25): error : Codex/Codex.h: No such file or directory
	-> 